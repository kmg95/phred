[{"/Users/karim/phredenv/phredfront/src/index.js":"1","/Users/karim/phredenv/phredfront/src/App.js":"2","/Users/karim/phredenv/phredfront/src/reportWebVitals.js":"3","/Users/karim/phredenv/phredfront/src/components/AddObj.component.js":"4","/Users/karim/phredenv/phredfront/src/components/ObjList.component.js":"5","/Users/karim/phredenv/phredfront/src/components/UpdateObj.component.js":"6","/Users/karim/phredenv/phredfront/src/services/obj.service.js":"7"},{"size":475,"mtime":1648421748833,"results":"8","hashOfConfig":"9"},{"size":1363,"mtime":1648570194595,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1647937402080,"results":"11","hashOfConfig":"12"},{"size":4845,"mtime":1648570161677,"results":"13","hashOfConfig":"9"},{"size":3424,"mtime":1648572179714,"results":"14","hashOfConfig":"9"},{"size":5981,"mtime":1648570530995,"results":"15","hashOfConfig":"9"},{"size":131,"mtime":1648570003083,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14dhk2p",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"xp00dz",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"23"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/karim/phredenv/phredfront/src/index.js",[],[],"/Users/karim/phredenv/phredfront/src/App.js",[],[],["43","44"],"/Users/karim/phredenv/phredfront/src/reportWebVitals.js",[],[],["45","46"],"/Users/karim/phredenv/phredfront/src/components/AddObj.component.js",["47"],[],"import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { baseURL, headers } from \"../services/obj.service\";\nexport const AddObj = () => {\n  const initialObjState = {\n    id: null,\n    name: \"\",\n    datum: null,\n    pH: 0.00,\n    SPO2: 0.00,\n    temperature: 0.00,\n    SPO2color: \"\",\n    turbidity: \"\",\n  };\n  const [obj, setObj] = useState(initialObjState);\n  const [submitted, setSubmitted] = useState(false);\n  const handleObjChange = (e) => {\n    const { name, value } = e.target;\n    setObj({ ...obj, [name]: value });\n  };\n  const submitObj = () => {\n    let data = {\n      name: obj.name,\n      datum: obj.datum,\n      pH: obj.pH,\n      SPO2: obj.SPO2,\n      temperature: obj.temperature,\n      SPO2color: obj.SPO2color,\n      turbidity: obj.turbidity\n    };\n    axios\n      .post(`${baseURL}core/`, data, {\n        /*headers: {\n          headers,\n        },*/\n      })\n      .then((response) => {\n        setObj({\n          id: response.data.id,\n          name: response.data.name,\n          datum: response.data.datum,\n          pH: response.data.pH,\n          SPO2: response.data.SPO2,\n          temperature: response.data.temperature,\n          SPO2color: response.data.SPO2color,\n          turbidity: response.data.turbidity\n        });\n        setSubmitted(true);\n        console.log(response.data);\n        console.log()\n      })\n      .catch((e) => {\n        console.error(e);\n      });\n  };\n  const newObj = () => {\n    setObj(initialObjState);\n    setSubmitted(false);\n  };\n  \nreturn (\n    <div className=\"submit-form\">\n          {submitted ? (\n            <div>\n              <div\n                className=\"alert alert-success alert-dismissible fade show\"\n                role=\"alert\"\n              >\n                Obj Added!\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n              <button className=\"btn btn-success\" onClick={newObj}>\n                Add\n              </button>\n            </div>\n          ) : (\n            <div>\n              <div className=\"form-group\">\n                <label htmlFor=\"name\">Name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"name\"\n                  required\n                  value={obj.name}\n                  onChange={handleObjChange}\n                  name=\"name\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"pH\">pH</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"pH\"\n                  required\n                  value={obj.pH}\n                  onChange={handleObjChange}\n                  name=\"pH\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"SPO2\">SPO2</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"SPO2\"\n                  required\n                  value={obj.SPO2}\n                  onChange={handleObjChange}\n                  name=\"SPO2\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"temperature\">temperature</label>\n                <input\n                  type=\"number\"\n                  className=\"form-control\"\n                  id=\"temperature\"\n                  required\n                  value={obj.temperature}\n                  onChange={handleObjChange}\n                  name=\"temperature\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"SPO2color\">SPO2color</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"SPO2color\"\n                  required\n                  value={obj.SPO2color}\n                  onChange={handleObjChange}\n                  name=\"SPO2color\"\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"turbidity\">turbidity</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"turbidity\"\n                  required\n                  value={obj.turbidity}\n                  onChange={handleObjChange}\n                  name=\"turbidity\"\n                />\n              </div>\n              <button onClick={submitObj} className=\"btn btn-success\">\n                Submit\n              </button>\n            </div>\n          )}\n        </div>\n  );\n};","/Users/karim/phredenv/phredfront/src/components/ObjList.component.js",["48"],[],"import axios from \"axios\";\n    import React, { useState, useEffect, useRef } from \"react\";\n    import { baseURL, headers } from \"../services/obj.service\";\n    import { useHistory } from \"react-router-dom\";\n    export const ObjList = () => {\n      const [objs, setObjs] = useState([]);\n      const history = useHistory();\n      const countRef = useRef(0);\n      const [deleted, setDeleted] = useState(false);\n      useEffect(() => {\n        retrieveAllObjs();\n      }, [countRef]);\n      const retrieveAllObjs = () => {\n        axios\n          .get(`${baseURL}core/`, {\n            /*headers: {\n              headers,\n            }, */\n          })\n          .then((response) => {\n            setObjs(response.data);\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n      };\n      const deleteObj = (id) => {\n        axios\n          .delete(`${baseURL}core/${id}/`, {\n           /* headers: {\n              headers,\n            }, */\n          })\n          .then((response) => {\n            setDeleted(true);\n            retrieveAllObjs();\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n      };\n      const handleUpdateClick = (id) => {\n        history.push(`/core/${id}/update/`);\n      };\n    return (\n        <div className=\"row justify-content-center\">\n          <div className=\"col\">\n            {deleted && (\n              <div\n                className=\"alert alert-danger alert-dismissible fade show\"\n                role=\"alert\"\n              >\n                Obj deleted!\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n            )}\n            {objs &&\n              objs.map((obj, index) => (\n                <div className=\"card my-3 w-25 mx-auto\">\n                  <div className=\"card-body\">\n                    <h2 className=\"card-title font-weight-bold\">{obj.name}</h2>\n                    <h4 className=\"card-subtitle mb-2\">{obj.pH}</h4>\n                    <h4 className=\"card-text\">{obj.SPO2}</h4>\n                    <h4 className=\"card-text\">{obj.temperature}</h4>\n                    <h4 className=\"card-text\">{obj.SPO2color}</h4>\n                    <h4 className=\"card-text\">{obj.turbidity}</h4>\n                  </div>\n                  <div classNameName=\"card-footer\">\n                    <div\n                      className=\"btn-group justify-content-around w-75 mb-1 \"\n                      data-toggle=\"buttons\"\n                    >\n                      <span>\n                        <button\n                          className=\"btn btn-info\"\n                          onClick={() => handleUpdateClick(obj.id)}\n                        >\n                          Update\n                        </button>\n                      </span>\n                      <span>\n                        <button\n                          className=\"btn btn-danger\"\n                          onClick={() => deleteObj(obj.id)}\n                        >\n                          Delete\n                        </button>\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      );\n    };","/Users/karim/phredenv/phredfront/src/components/UpdateObj.component.js",["49"],[],"import axios from \"axios\";\n    import React, { useState, useEffect, useRef } from \"react\";\n    import { useParams } from \"react-router-dom\";\n    import { baseURL, headers } from \"./../services/obj.service\";\n    export const UpdateObj = () => {\n      const initialObjState = {\n        id: null,\n        name: \"\",\n        datum: null,\n        pH: 0.00,\n        SPO2: 0.00,\n        temperature: 0.00,\n        SPO2color: \"\",\n        turbidity: \"\"\n      };\n      let { id } = useParams();\n      const [currentObj, setCurrentObj] = useState(initialObjState);\n      const [submitted, setSubmitted] = useState(false);\n      const countRef = useRef(0);\n      useEffect(() => {\n        retrieveObj();\n      }, [countRef]);\n      const handleObjChange = (e) => {\n        const { name, value } = e.target;\n        setCurrentObj({ ...currentObj, [name]: value });\n      };\n      const retrieveObj = () => {\n        axios\n          .get(`${baseURL}core/${id}/`, {\n            /*headers: {\n              headers,\n            },*/\n          })\n          .then((response) => {\n            setCurrentObj({\n                id: response.data.id,\n                name: response.data.name,\n                datum: response.data.datum,\n                pH: response.data.pH,\n                SPO2: response.data.SPO2,\n                temperature: response.data.temperature,\n                SPO2color: response.data.SPO2color,\n                turbidity: response.data.turbidity\n            });\n            console.log(currentObj);\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n      };\n      const updateObj = () => {\n        let data = {\n            name: currentObj.name,\n            datum: currentObj.datum,\n            pH: currentObj.pH,\n            SPO2: currentObj.SPO2,\n            temperature: currentObj.temperature,\n            SPO2color: currentObj.SPO2color,\n            turbidity: currentObj.turbidity\n        };\n        axios\n          .put(`${baseURL}/obj/${id}/`, data, {\n            headers: {\n              headers,\n            },\n          })\n          .then((response) => {\n            setCurrentObj({\n                id: response.data.id,\n                name: response.data.name,\n                datum: response.data.datum,\n                pH: response.data.pH,\n                SPO2: response.data.SPO2,\n                temperature: response.data.temperature,\n                SPO2color: response.data.SPO2color,\n                turbidity: response.data.turbidity\n            });\n            setSubmitted(true);\n            console.log(response.data);\n          })\n          .catch((e) => {\n            console.error(e);\n          });\n      };\n      const newObj = () => {\n        setCurrentObj(initialObjState);\n        setSubmitted(false);\n      };\n      return (\n        <div className=\"submit-form\">\n        {submitted ? (\n          <div>\n            <div\n              className=\"alert alert-success alert-dismissible fade show\"\n              role=\"alert\"\n            >\n              Obj Updated!\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"alert\"\n                aria-label=\"Close\"\n              >\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <button className=\"btn btn-success\" onClick={newObj}>\n              Update\n            </button>\n          </div>\n        ) : (\n            <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Name</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"name\"\n                required\n                value={currentObj.name}\n                onChange={handleObjChange}\n                name=\"name\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"pH\">pH</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"pH\"\n                required\n                value={currentObj.pH}\n                onChange={handleObjChange}\n                name=\"pH\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"SPO2\">SPO2</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"SPO2\"\n                required\n                value={currentObj.SPO2}\n                onChange={handleObjChange}\n                name=\"SPO2\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"temperature\">temperature</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"temperature\"\n                required\n                value={currentObj.temperature}\n                onChange={handleObjChange}\n                name=\"temperature\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"SPO2color\">SPO2color</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"SPO2color\"\n                required\n                value={currentObj.SPO2color}\n                onChange={handleObjChange}\n                name=\"SPO2color\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"turbidity\">turbidity</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"turbidity\"\n                required\n                value={currentObj.turbidity}\n                onChange={handleObjChange}\n                name=\"turbidity\"\n              />\n            </div>\n            <button onClick={updateObj} className=\"btn btn-success\">\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n      );\n    };","/Users/karim/phredenv/phredfront/src/services/obj.service.js",[],[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},{"ruleId":"52","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":3,"column":19,"nodeType":"58","messageId":"59","endLine":3,"endColumn":26},{"ruleId":"56","severity":1,"message":"57","line":3,"column":23,"nodeType":"58","messageId":"59","endLine":3,"endColumn":30},{"ruleId":"60","severity":1,"message":"61","line":22,"column":10,"nodeType":"62","endLine":22,"endColumn":20,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"no-unused-vars","'headers' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'retrieveObj'. Either include it or remove the dependency array.","ArrayExpression",["66"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [countRef, retrieveObj]",{"range":"69","text":"70"},[700,710],"[countRef, retrieveObj]"]